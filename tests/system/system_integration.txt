test_marathon_basics.py:def test_launch_mesos_container():
test_marathon_basics.py-    """ Test the successful launch of a mesos container on MoM.
test_marathon_basics.py-    """
test_marathon_basics.py-    with marathon_on_marathon():
test_marathon_basics.py-        client = marathon.create_client()
test_marathon_basics.py-        app_id = uuid.uuid4().hex
--
test_marathon_basics.py:def test_launch_docker_container():
test_marathon_basics.py-    """ Test the successful launch of a docker container on MoM.
test_marathon_basics.py-    """
test_marathon_basics.py-    with marathon_on_marathon():
test_marathon_basics.py-        client = marathon.create_client()
test_marathon_basics.py-        app_id = uuid.uuid4().hex
--
test_marathon_basics.py:def test_launch_mesos_mom_graceperiod():
test_marathon_basics.py-    """ Test the 'taskKillGracePeriodSeconds' in a MoM environment.  Read more details
test_marathon_basics.py-        on this test in `test_root_marathon.py::test_launch_mesos_root_marathon_graceperiod`
test_marathon_basics.py-    """
test_marathon_basics.py-
test_marathon_basics.py-    app_id = uuid.uuid4().hex
--
test_marathon_basics.py:def test_launch_docker_mom_graceperiod():
test_marathon_basics.py-    """ Test the 'taskKillGracePeriodSeconds' in a MoM environment.
test_marathon_basics.py-        This is the same test as above however tests against docker.
test_marathon_basics.py-    """
test_marathon_basics.py-
test_marathon_basics.py-    app_id = uuid.uuid4().hex
--
test_marathon_basics.py:def test_docker_port_mappings():
test_marathon_basics.py-    """ Tests docker ports are mapped and are accessible from the host.
test_marathon_basics.py-    """
test_marathon_basics.py-    app_id = uuid.uuid4().hex
test_marathon_basics.py-    with marathon_on_marathon():
test_marathon_basics.py-        client = marathon.create_client()
--
test_marathon_basics.py:def test_docker_dns_mapping():
test_marathon_basics.py-    """ Tests that a running docker task is accessible from DNS.
test_marathon_basics.py-    """
test_marathon_basics.py-    app_id = uuid.uuid4().hex
test_marathon_basics.py-    with marathon_on_marathon():
test_marathon_basics.py-        client = marathon.create_client()
--
test_marathon_basics.py:def test_launch_app_timed():
test_marathon_basics.py-    """ Most tests wait until a task is launched with no reference to time.
test_marathon_basics.py-    This simple test verifies that if a app is launched on marathon that within 3 secs
test_marathon_basics.py-    it will be a task.
test_marathon_basics.py-    """
test_marathon_basics.py-    app_id = uuid.uuid4().hex
--
test_marathon_basics.py:def test_ui_registration_requirement():
test_marathon_basics.py-    """ Testing the UI is a challenge with this toolchain.  The UI team has the
test_marathon_basics.py-        best tooling for testing it.   This test verifies that the required configurations
test_marathon_basics.py-        for the service endpoint and ability to launch to the service UI are present.
test_marathon_basics.py-    """
test_marathon_basics.py-    tasks = mesos.get_master().tasks()
--
test_marathon_basics.py:def test_ui_available():
test_marathon_basics.py-    """ This simply confirms that a URL call the service endpoint is successful if
test_marathon_basics.py-    MoM is launched.
test_marathon_basics.py-    """
test_marathon_basics.py-    response = http.get("{}/ui/".format(
test_marathon_basics.py-        shakedown.dcos_service_url('marathon-user')))
--
test_marathon_basics.py:def test_task_failure_recovers():
test_marathon_basics.py-    """ Tests that if a task is KILLED, it will be relaunched and the taskID is different.
test_marathon_basics.py-    """
test_marathon_basics.py-    app_id = uuid.uuid4().hex
test_marathon_basics.py-    app_def = app(app_id)
test_marathon_basics.py-
--
test_marathon_basics.py:def test_good_user():
test_marathon_basics.py-    """ Test changes an app from the non-specified (default user) to another
test_marathon_basics.py-        good user.  This works on coreOS.
test_marathon_basics.py-    """
test_marathon_basics.py-    app_id = uuid.uuid4().hex
test_marathon_basics.py-    app_def = app(app_id)
--
test_marathon_basics.py:def test_bad_user():
test_marathon_basics.py-    """ Test changes the default user to a bad user and confirms that task will
test_marathon_basics.py-        not launch.
test_marathon_basics.py-    """
test_marathon_basics.py-    app_id = uuid.uuid4().hex
test_marathon_basics.py-    app_def = app(app_id)
--
test_marathon_basics.py:def test_bad_uri():
test_marathon_basics.py-    """ Tests marathon's response to launching a task with a bad url (a url that isn't fetchable)
test_marathon_basics.py-    """
test_marathon_basics.py-    app_id = uuid.uuid4().hex
test_marathon_basics.py-    app_def = app(app_id)
test_marathon_basics.py-    fetch = [{
--
test_marathon_basics.py:def test_launch_group():
test_marathon_basics.py-    """ Tests the lauching a group of apps at the same time (by request, it is 2 deep)
test_marathon_basics.py-    """
test_marathon_basics.py-    with marathon_on_marathon():
test_marathon_basics.py-        client = marathon.create_client()
test_marathon_basics.py-        try:
--
test_marathon_basics.py:def test_scale_group():
test_marathon_basics.py-    """ Tests the scaling of a group
test_marathon_basics.py-    """
test_marathon_basics.py-    with marathon_on_marathon():
test_marathon_basics.py-        client = marathon.create_client()
test_marathon_basics.py-        try:
--
test_marathon_basics.py:def test_scale_app_in_group():
test_marathon_basics.py-    """ Tests the scaling of an individual app in a group
test_marathon_basics.py-    """
test_marathon_basics.py-    with marathon_on_marathon():
test_marathon_basics.py-        client = marathon.create_client()
test_marathon_basics.py-        try:
--
test_marathon_basics.py:def test_scale_app_in_group_then_group():
test_marathon_basics.py-    """ Tests the scaling of an app in the group, then the group
test_marathon_basics.py-    """
test_marathon_basics.py-    with marathon_on_marathon():
test_marathon_basics.py-        client = marathon.create_client()
test_marathon_basics.py-        try:
--
test_marathon_basics.py:def test_http_health_check_healthy(protocol):
test_marathon_basics.py-    """ Test HTTP, MESOS_HTTP, TCP and MESOS_TCP with standard python server
test_marathon_basics.py-    """
test_marathon_basics.py-    with marathon_on_marathon():
test_marathon_basics.py-        client = marathon.create_client()
test_marathon_basics.py-        app_def = python_http_app()
--
test_marathon_basics.py:def test_command_health_check_healthy():
test_marathon_basics.py-    # Test COMMAND protocol
test_marathon_basics.py-    with marathon_on_marathon():
test_marathon_basics.py-        client = marathon.create_client()
test_marathon_basics.py-        app_def = app()
test_marathon_basics.py-
--
test_marathon_basics.py:def test_https_health_check_healthy(protocol):
test_marathon_basics.py-    """ Test HTTPS and MESOS_HTTPS protocols with a prepared nginx image that enables
test_marathon_basics.py-        SSL (using self-signed certificate) and listens on 443
test_marathon_basics.py-    """
test_marathon_basics.py-    with marathon_on_marathon():
test_marathon_basics.py-        client = marathon.create_client()
--
test_marathon_basics.py:def test_health_check_unhealthy():
test_marathon_basics.py-    """ Tests failed health checks of an app launched by marathon.
test_marathon_basics.py-        This was a health check that never passed.
test_marathon_basics.py-    """
test_marathon_basics.py-    with marathon_on_marathon():
test_marathon_basics.py-        client = marathon.create_client()
--
test_marathon_basics.py:def test_health_failed_check():
test_marathon_basics.py-    """ Tests a health check of an app launched by marathon.
test_marathon_basics.py-        The health check succeeded, then failed due to a network partition.
test_marathon_basics.py-    """
test_marathon_basics.py-
test_marathon_basics.py-    with marathon_on_marathon():
--
test_marathon_basics.py:def test_resident_health():
test_marathon_basics.py-    """ Marathon bug reported: https://jira.mesosphere.com/browse/MARATHON-7050
test_marathon_basics.py-        Where resident tasks (common for Persistent Volumes) would fail health checks
test_marathon_basics.py-
test_marathon_basics.py-    """
test_marathon_basics.py-    app_def = resident_app()
--
test_marathon_basics.py:def test_pinned_task_scales_on_host_only():
test_marathon_basics.py-    """ Tests that scaling a pinned app scales only on the pinned node.
test_marathon_basics.py-    """
test_marathon_basics.py-    app_def = app('pinned')
test_marathon_basics.py-    host = ip_other_than_mom()
test_marathon_basics.py-    pin_to_host(app_def, host)
--
test_marathon_basics.py:def test_pinned_task_recovers_on_host():
test_marathon_basics.py-    """ Tests that a killed pinned task will recover on the pinned node.
test_marathon_basics.py-    """
test_marathon_basics.py-    app_def = app('pinned')
test_marathon_basics.py-    host = ip_other_than_mom()
test_marathon_basics.py-    pin_to_host(app_def, host)
--
test_marathon_basics.py:def test_pinned_task_does_not_scale_to_unpinned_host():
test_marathon_basics.py-    """ Tests when a task lands on a pinned node (and barely fits) when asked to
test_marathon_basics.py-        scale past the resources of that node will not scale.
test_marathon_basics.py-    """
test_marathon_basics.py-    app_def = app('pinned')
test_marathon_basics.py-    host = ip_other_than_mom()
--
test_marathon_basics.py:def test_pinned_task_does_not_find_unknown_host():
test_marathon_basics.py-    """ Tests that a task pinned to an unknown host will not launch.
test_marathon_basics.py-        within 10 secs it is still in deployment and 0 tasks are running.
test_marathon_basics.py-    """
test_marathon_basics.py-    app_def = app('pinned')
test_marathon_basics.py-    host = ip_other_than_mom()
--
test_marathon_basics.py:def test_launch_container_with_persistent_volume():
test_marathon_basics.py-    """ Tests launching a task with PV.  It will write to a file in the PV.
test_marathon_basics.py-        The app is killed and restarted and we can still read from the PV.
test_marathon_basics.py-    """
test_marathon_basics.py-    with marathon_on_marathon():
test_marathon_basics.py-        app_def = persistent_volume_app()
--
test_marathon_basics.py:def test_update_app():
test_marathon_basics.py-    """ Tests update an app.
test_marathon_basics.py-    """
test_marathon_basics.py-    app_id = uuid.uuid4().hex
test_marathon_basics.py-    app_def = app_mesos(app_id)
test_marathon_basics.py-    with marathon_on_marathon():
--
test_marathon_basics.py:def test_update_app_rollback():
test_marathon_basics.py-    """ Tests updating an app then rolling back the update.
test_marathon_basics.py-    """
test_marathon_basics.py-    app_id = uuid.uuid4().hex
test_marathon_basics.py-    app_def = readiness_and_health_app()
test_marathon_basics.py-    app_def['id'] = app_id
--
test_marathon_basics.py:def test_update_app_poor_health():
test_marathon_basics.py-    """ Tests updating an app with an automatic rollback due to poor health.
test_marathon_basics.py-    """
test_marathon_basics.py-    app_id = uuid.uuid4().hex
test_marathon_basics.py-    app_def = readiness_and_health_app()
test_marathon_basics.py-    app_def['id'] = app_id
--
test_marathon_fault_inject.py:def test_mom_with_master_process_failure():
test_marathon_fault_inject.py-    """ Launches a MoM, launches an app from MoM and restarts the master.
test_marathon_fault_inject.py-        It is expected that the service endpoint will come back and that the
test_marathon_fault_inject.py-        task_id is the original task_id
test_marathon_fault_inject.py-    """
test_marathon_fault_inject.py-    app_def = app('master-failure')
--
test_marathon_fault_inject.py:def test_mom_when_disconnected_from_zk():
test_marathon_fault_inject.py-    """ Launch an app from MoM.  Then knock out access to zk from the MoM.
test_marathon_fault_inject.py-        Verify the task is still good.
test_marathon_fault_inject.py-    """
test_marathon_fault_inject.py-    app_def = app('zk-failure')
test_marathon_fault_inject.py-    host = ip_other_than_mom()
--
test_marathon_fault_inject.py:def test_mom_when_task_agent_bounced():
test_marathon_fault_inject.py-    """ Launch an app from MoM and restart the node the task is on.
test_marathon_fault_inject.py-    """
test_marathon_fault_inject.py-    app_def = app('agent-failure')
test_marathon_fault_inject.py-    host = ip_other_than_mom()
test_marathon_fault_inject.py-    pin_to_host(app_def, host)
--
test_marathon_fault_inject.py:def test_mom_when_mom_agent_bounced():
test_marathon_fault_inject.py-    """ Launch an app from MoM and restart the node MoM is on.
test_marathon_fault_inject.py-    """
test_marathon_fault_inject.py-    app_def = app('agent-failure')
test_marathon_fault_inject.py-    mom_ip = ip_of_mom()
test_marathon_fault_inject.py-    host = ip_other_than_mom()
--
test_marathon_fault_inject.py:def test_mom_when_mom_process_killed():
test_marathon_fault_inject.py-    """ Launched a task from MoM then killed MoM.
test_marathon_fault_inject.py-    """
test_marathon_fault_inject.py-    app_def = app('agent-failure')
test_marathon_fault_inject.py-    host = ip_other_than_mom()
test_marathon_fault_inject.py-    pin_to_host(app_def, host)
--
test_marathon_fault_inject.py:def test_mom_with_network_failure():
test_marathon_fault_inject.py-    """Marathon on Marathon (MoM) tests for DC/OS with network failures
test_marathon_fault_inject.py-    simulated by knocking out ports
test_marathon_fault_inject.py-    """
test_marathon_fault_inject.py-
test_marathon_fault_inject.py-    # get MoM ip
--
test_marathon_fault_inject.py:def test_mom_with_network_failure_bounce_master():
test_marathon_fault_inject.py-    """Marathon on Marathon (MoM) tests for DC/OS with network failures simulated by
test_marathon_fault_inject.py-    knocking out ports
test_marathon_fault_inject.py-    """
test_marathon_fault_inject.py-
test_marathon_fault_inject.py-    # get MoM ip
--
test_marathon_on_marathon_ee.py:def test_mom_ee(version, security_mode):
test_marathon_on_marathon_ee.py-    assert_mom_ee(version, security_mode)
test_marathon_on_marathon_ee.py-    assert simple_sleep_app(mom_ee_endpoint(version, security_mode))
test_marathon_on_marathon_ee.py-
test_marathon_on_marathon_ee.py-
test_marathon_on_marathon_ee.py-def simple_sleep_app(name):
--
test_marathon_pods.py:def test_create_pod():
test_marathon_pods.py-    """Launch simple pod in DC/OS root marathon.
test_marathon_pods.py-    """
test_marathon_pods.py-    print("test")
test_marathon_pods.py-    client = marathon.create_client()
test_marathon_pods.py-    pod_id = "/pod-create"
--
test_marathon_pods.py:def test_event_channel():
test_marathon_pods.py-    """ Tests the Marathon event channnel specific to pod events.
test_marathon_pods.py-    """
test_marathon_pods.py-    client = marathon.create_client()
test_marathon_pods.py-    pod_id = "/pod-create"
test_marathon_pods.py-
--
test_marathon_pods.py:def test_remove_pod():
test_marathon_pods.py-    """Launch simple pod in DC/OS root marathon.
test_marathon_pods.py-    """
test_marathon_pods.py-    pod_id = "/pod-remove"
test_marathon_pods.py-    client = marathon.create_client()
test_marathon_pods.py-
--
test_marathon_pods.py:def test_multi_pods():
test_marathon_pods.py-    """Launch multiple instances of a pod"""
test_marathon_pods.py-    client = marathon.create_client()
test_marathon_pods.py-    pod_id = "/pod-multi"
test_marathon_pods.py-
test_marathon_pods.py-    pod_json = _pods_json()
--
test_marathon_pods.py:def test_scaleup_pods():
test_marathon_pods.py-    """Scaling up a pod from 1 to 10"""
test_marathon_pods.py-    client = marathon.create_client()
test_marathon_pods.py-    pod_id = "/pod-scaleup"
test_marathon_pods.py-
test_marathon_pods.py-    pod_json = _pods_json()
--
test_marathon_pods.py:def test_scaledown_pods():
test_marathon_pods.py-    """Scaling down a pod from 10 to 1"""
test_marathon_pods.py-    client = marathon.create_client()
test_marathon_pods.py-    pod_id = "/pod-scaleup"
test_marathon_pods.py-
test_marathon_pods.py-    pod_json = _pods_json()
--
test_marathon_pods.py:def test_head_of_pods():
test_marathon_pods.py-    """Tests the availability of pods via the API"""
test_marathon_pods.py-    client = marathon.create_client()
test_marathon_pods.py-    url = urljoin(DCOS_SERVICE_URL, _pods_url())
test_marathon_pods.py-    result = http.head(url)
test_marathon_pods.py-    assert result.status_code == 200
--
test_marathon_pods.py:def test_version_pods():
test_marathon_pods.py-    """Versions and reverting with pods"""
test_marathon_pods.py-    client = marathon.create_client()
test_marathon_pods.py-
test_marathon_pods.py-    pod_id = "/pod-{}".format(uuid.uuid4().hex)
test_marathon_pods.py-
--
test_marathon_pods.py:def test_pod_comm_via_volume():
test_marathon_pods.py-    """ Confirms that 1 container can read data from a volume that was written
test_marathon_pods.py-        from the other container.  Most of the test is in the `vol-pods.json`.
test_marathon_pods.py-        The reading container will die if it can't read the file. So if there are 2 tasks after
test_marathon_pods.py-        4 secs were are good.
test_marathon_pods.py-    """
--
test_marathon_pods.py:def test_pod_restarts_on_nonzero_exit():
test_marathon_pods.py-    """ Confirm that pods will relaunch if 1 of the containers exits non-zero.
test_marathon_pods.py-        2 new tasks with new task_ids will result.
test_marathon_pods.py-    """
test_marathon_pods.py-    client = marathon.create_client()
test_marathon_pods.py-
--
test_marathon_pods.py:def test_pod_multi_port():
test_marathon_pods.py-    """ Tests that 2 containers with a port each will properly provision with their unique port assignment.
test_marathon_pods.py-    """
test_marathon_pods.py-    client = marathon.create_client()
test_marathon_pods.py-
test_marathon_pods.py-    pod_id = "/pod-{}".format(uuid.uuid4().hex)
--
test_marathon_pods.py:def test_pod_port_communication():
test_marathon_pods.py-    """ Test that 1 container can establish a socket connection to the other container in the same pod.
test_marathon_pods.py-    """
test_marathon_pods.py-    client = marathon.create_client()
test_marathon_pods.py-
test_marathon_pods.py-    pod_id = "/pod-{}".format(uuid.uuid4().hex)
--
test_marathon_pods.py:def test_pin_pod():
test_marathon_pods.py-    """ Tests that we can pin a pod to a host.
test_marathon_pods.py-    """
test_marathon_pods.py-    client = marathon.create_client()
test_marathon_pods.py-
test_marathon_pods.py-    pod_id = "/pod-{}".format(uuid.uuid4().hex)
--
test_marathon_pods.py:def test_health_check():
test_marathon_pods.py-    """ Tests that health checks work in pods.
test_marathon_pods.py-    """
test_marathon_pods.py-    client = marathon.create_client()
test_marathon_pods.py-
test_marathon_pods.py-    pod_id = "/pod-{}".format(uuid.uuid4().hex)
--
test_marathon_pods.py:def test_health_failed_check():
test_marathon_pods.py-    """ Deploys a pod with good health checks, then partitions the network and verifies
test_marathon_pods.py-        the tasks return with new task ids.
test_marathon_pods.py-    """
test_marathon_pods.py-    client = marathon.create_client()
test_marathon_pods.py-
--
test_marathon_service_support.py:def test_framework_unavailable_on_mom():
test_marathon_service_support.py-    """ Launches an app that has elements necessary to create a service endpoint in DCOS.
test_marathon_service_support.py-        This test confirms that the endpoint is not created when launched with MoM.
test_marathon_service_support.py-    """
test_marathon_service_support.py-    if shakedown.service_available_predicate('pyfw'):
test_marathon_service_support.py-        client = marathon.create_client()
--
test_marathon_service_support.py:def test_deploy_custom_framework():
test_marathon_service_support.py-    """ Launches an app that has elements necessary to create a service endpoint in DCOS.
test_marathon_service_support.py-        This test confirms that the endpoint is created from the root marathon.
test_marathon_service_support.py-    """
test_marathon_service_support.py-
test_marathon_service_support.py-    client = marathon.create_client()
--
test_marathon_service_support.py:def test_readiness_time_check():
test_marathon_service_support.py-    """ Test that an app is still in deployment until the readiness check.
test_marathon_service_support.py-    """
test_marathon_service_support.py-    client = marathon.create_client()
test_marathon_service_support.py-    fw = fake_framework_app()
test_marathon_service_support.py-    # testing 30 sec interval
--
test_marathon_service_support.py:def test_rollback_before_ready():
test_marathon_service_support.py-    """ Tests the rollback of an app that didn't complete readiness.
test_marathon_service_support.py-    """
test_marathon_service_support.py-    client = marathon.create_client()
test_marathon_service_support.py-    fw = fake_framework_app()
test_marathon_service_support.py-    # testing 30 sec interval
--
test_marathon_service_support.py:def test_single_instance():
test_marathon_service_support.py-    """ Tests to see that marathon honors instance instance apps (such as a framework).
test_marathon_service_support.py-        They do not scale past 1.
test_marathon_service_support.py-    """
test_marathon_service_support.py-    client = marathon.create_client()
test_marathon_service_support.py-    fw = fake_framework_app()
--
test_marathon_service_support.py:def test_readiness_test_timeout():
test_marathon_service_support.py-    """ Tests a poor readiness check.
test_marathon_service_support.py-    """
test_marathon_service_support.py-    client = marathon.create_client()
test_marathon_service_support.py-    fw = fake_framework_app()
test_marathon_service_support.py-    fw['readinessChecks'][0]['path'] = '/bad-path'
--
test_marathon_universe.py:def test_install_marathon():
test_marathon_universe.py-    """Install the Marathon package for DC/OS.
test_marathon_universe.py-    """
test_marathon_universe.py-
test_marathon_universe.py-    # Install
test_marathon_universe.py-    shakedown.install_package_and_wait(PACKAGE_NAME)
--
test_marathon_universe.py:def test_custom_service_name():
test_marathon_universe.py-    """  Install MoM with a custom service name.
test_marathon_universe.py-    """
test_marathon_universe.py-    cosmos = packagemanager.PackageManager(get_cosmos_url())
test_marathon_universe.py-    pkg = cosmos.get_package_version('marathon', None)
test_marathon_universe.py-    options = {
--
test_marathon_universe.py:def test_install_universe_package(package):
test_marathon_universe.py-    """ Marathon is responsible for installing packages from the universe.
test_marathon_universe.py-        This test confirms that several packages are installed into a healty state.
test_marathon_universe.py-    """
test_marathon_universe.py-
test_marathon_universe.py-    shakedown.install_package_and_wait(package)
--
test_root_marathon.py:def test_default_user():
test_root_marathon.py-    """ Ensures the default user of a task is started as root.  This is the default user.
test_root_marathon.py-    """
test_root_marathon.py-
test_root_marathon.py-    # launch unique-sleep
test_root_marathon.py-    application_json = get_resource("{}/unique-sleep.json".format(fixture_dir()))
--
test_root_marathon.py:def test_launch_mesos_root_marathon_default_graceperiod():
test_root_marathon.py-    """  Test the 'taskKillGracePeriodSeconds' of a launched task from the root marathon.
test_root_marathon.py-         The graceperiod is the time after a kill sig to allow for a graceful shutdown.
test_root_marathon.py-         The default is 3 seconds.  The fetched test.py contains `signal.signal(signal.SIGTERM, signal.SIG_IGN)`.
test_root_marathon.py-    """
test_root_marathon.py-    app_def = common.app_mesos()
--
test_root_marathon.py:def test_launch_mesos_root_marathon_graceperiod():
test_root_marathon.py-    """  Test the 'taskKillGracePeriodSeconds' of a launched task from the root marathon.
test_root_marathon.py-         The default is 3 seconds.  This tests setting that period to other than the default value.
test_root_marathon.py-    """
test_root_marathon.py-    app_def = common.app_mesos()
test_root_marathon.py-    app_def['id'] = 'grace'
--
test_root_marathon.py:def test_declined_offer_due_to_resource_role():
test_root_marathon.py-    """ Tests that an offer was declined because the role doesn't exist
test_root_marathon.py-    """
test_root_marathon.py-    app_id = '/{}'.format(uuid.uuid4().hex)
test_root_marathon.py-    app_def = common.pending_deployment_due_to_resource_roles(app_id)
test_root_marathon.py-
--
test_root_marathon.py:def test_declined_offer_due_to_cpu_requirements():
test_root_marathon.py-    """ Tests that an offer was declined because the number of cpus can't be found in an offer
test_root_marathon.py-    """
test_root_marathon.py-    app_id = '/{}'.format(uuid.uuid4().hex)
test_root_marathon.py-    app_def = common.pending_deployment_due_to_cpu_requirement(app_id)
test_root_marathon.py-
--
test_root_marathon.py:def test_event_channel():
test_root_marathon.py-    """ Tests the event channel.  The way events are verified is by streaming the events
test_root_marathon.py-        to a test.txt file.   The fixture ensures the file is removed before and after the test.
test_root_marathon.py-        events checked are connecting, deploying a good task and killing a task.
test_root_marathon.py-    """
test_root_marathon.py-    app_def = common.app_mesos()
--
test_root_marathon.py:def test_private_repository_docker_app():
test_root_marathon.py-    # Create and copy docker credentials to all private agents
test_root_marathon.py-    assert 'DOCKER_HUB_USERNAME' in os.environ, "Couldn't find docker hub username. $DOCKER_HUB_USERNAME is not set"
test_root_marathon.py-    assert 'DOCKER_HUB_PASSWORD' in os.environ, "Couldn't find docker hub password. $DOCKER_HUB_PASSWORD is not set"
test_root_marathon.py-
test_root_marathon.py-    username = os.environ['DOCKER_HUB_USERNAME']
--
test_root_marathon.py:def test_private_repository_mesos_app():
test_root_marathon.py-    """ Test private docker registry with mesos containerizer using "credentials" container field.
test_root_marathon.py-        Note: Despite of what DC/OS docmentation states this feature is not yet implemented:
test_root_marathon.py-        https://issues.apache.org/jira/browse/MESOS-7088
test_root_marathon.py-    """
test_root_marathon.py-
--
test_root_marathon.py:def test_external_volume():
test_root_marathon.py-    volume_name = "marathon-si-test-vol-{}".format(uuid.uuid4().hex)
test_root_marathon.py-    app_def = common.external_volume_mesos_app(volume_name)
test_root_marathon.py-    app_id = app_def['id']
test_root_marathon.py-
test_root_marathon.py-    # Tested with root marathon since MoM doesn't have
